{"version":3,"sources":["isIterable.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAEA,IAAM,kBAAkB,0BAAa,MAAb,KAAwB,OAAO,QAAP;AAChD,IAAM,sBAAsB,YAAtB;;;;;;;kBAMS,UAAC,aAAD,EAAiC;AAC5C,QAAI,iBAAJ,CAD4C;;AAG5C,QAAI,CAAC,wBAAW,aAAX,CAAD,EAA4B;AAC5B,eAAO,KAAP,CAD4B;KAAhC;;AAIA,QAAI,eAAJ,EAAqB;AACjB,mBAAW,cAAc,eAAd,CAAX,CADiB;KAArB,MAEO;AACH,mBAAW,cAAc,mBAAd,CAAX,CADG;KAFP;;AAMA,WAAO,0BAAa,QAAb,CAAP,CAb4C;CAAjC","file":"isIterable.js","sourcesContent":["import _ from 'lodash';\n\nconst ITERATOR_SYMBOL = _.isFunction(Symbol) && Symbol.iterator;\nconst OLD_ITERATOR_SYMBOL = '@@iterator';\n\n/**\n * @see https://github.com/lodash/lodash/issues/1668\n * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Iteration_protocols\n */\nexport default (maybeIterable: any): boolean => {\n    let iterator;\n\n    if (!_.isObject(maybeIterable)) {\n        return false;\n    }\n\n    if (ITERATOR_SYMBOL) {\n        iterator = maybeIterable[ITERATOR_SYMBOL];\n    } else {\n        iterator = maybeIterable[OLD_ITERATOR_SYMBOL];\n    }\n\n    return _.isFunction(iterator);\n};\n"],"sourceRoot":"/source/"}